Project Creation

#1 Create new app using the following command: "python manage.py startapp projects". 
#2 Add newly created folder, in Settings.py file of the original folder.
   
   Inside of "INSTALLED_APPS", add the following:
   projects.apps.ProjectsConfig (placed in app.py of new app)


Navigation
#1 Inside of a folder(projects) add the file urls.py 
#2 Inside of urls add the following:
   -> urlpatterns = [
         path('projects/', views.projects, name="projects"),
         path('project/<str:pk>', views.project, name="project")
      ]

#3 Inside of views.py file create import http requests, and create a function which returns http request:
  
   -> from django.http import HttpResponse
  
   -> def projects(request):
    return HttpResponse('Projects')
  
   -> def project(request, pk):
    return HttpResponse('Project' + ' ' + str(pk))

#4 Inside of main folder, in urls.py add the following:

   -> from django.urls import path, include
   -> path(' ', include('projects.urls')) - projects is the file name from where we are importing the navs



HTML Creation

#1 create folder, add html pages.
#2 Go To Main folder, in settings.py page and add the following:
   -> import os
   -> inside of TEMPLATES > DIRS, array add the following:
      os.path.join(BASE_DIR, 'templates' ),
   ->  'templates' is the name of a folder where html files are located.

#3 Unite views.py of the projects folder, update the update views.py file. 
   Istead of HttpResponse -> render (request, 'html file name')
   -> def projects(request):
          return render(request, 'projects.html')



Admin Creation
#1 Use the following command to create Admin: python manage.py createsuperuser
# enter emaiil and password


Class Creation
#1 class Project(models.Model):
      id = models.UUIDField(default=uuid.uuid4, unique=True, primary_key=True, editable=False)
      created = models.DateTimeField(auto_now_add=True)
      title = models.CharField( max_length=200)

#2 After describing the class we need to migrate it.
   -> python manage.py makemigrations
   -> python manage.py migrate

#3 go to the same apps file named admin.py and do the following:
   -> import model:   from .models import Project
   -> Register model:   admin.site.register(Project)

#4 One to many relatinship using foreignKey ->  models.ForeignKey(Project, on_delete=models.CASCADE)
$many to many relationship -> models.ManyToManyField('Tag', blank=True)



#Creating forms

#1 - Create Model for the forms
#2 - Create a form based on the model
      from django.forms import ModelForm
      from .models import Project

      class ProjectForm(ModelForm):
         class Meta: 
            model = Project
            fields = '__all__'

#3 - Pass the form to the html through function in view.py
   from .forms import ProjectForm

   def createProject(request):
      form = ProjectForm()
      context = {'form': form}
      return render(request, 'projects/project_form.html', context)

#4 - Dislpay the form in html
     <form method="POST">
        {% csrf_token %} 
        {{form.as_p}}
        <input type="submit">
    </form>



#Static files

#1 Create folder static 
#2 go to the main folders settings.py page
#3 Find STATIC_URL and under it create the following:
   STATICFILES_DIRS = [
      BASE_DIR / 'static' 
   ]

#4 go to main.html and before <html> </html> write this : {% load static %}
       <link rel="stylesheet" href="{% static 'styles/main.css' %}">

#5 do the same for every html file where you need static files
#6 under STATIC_URL create    MEDIA_ROOT 
   MEDIA_ROOT =  os.path.join(BASE_DIR, 'static/images' ),

#7 Under STATIC_URL and above of STATICFILES_DIRS to the following:
   MEDIA_URL='/images/'  - inside of static files, there is a folder named "images" where we keep images.

#8 Go to main folders url.py file and add this 
   from django.conf import settings
   from django.conf.urls.static import static

   urlpatterns +=static(settings.MEDIA_URL, document_root = settings.MEDIA_ROOT )

#9 Go to the submitting form and add the following:
   enctype="multipart/form-data"
   <form action='' method="POST" enctype="multipart/form-data">

#10 add request.POST to create and update functions in view:
   form = ProjectForm(request.POST, request.FILES)



Relationships

#1 - ManyToMany ( class Project has manytomany relationship with class Tags).
     While dispplaying  project data, we can access his tags so --> project.tags.all

#2 - OneToMany (Fireignkey)
     While dispplaying  project data, we can access his tags so --> project.skill_set.all_
profile.skill_set.all


Signals 
#1 In order to create a signal we need three things:
   1 - Model - crud of this model shall cause a function
   2 - function - caused function
   3 - receiver - decorator
   4 - event - cause of the event post_save, pre_save,

#2 Imports
   from django.db.models.signals import post_save
   from django.dispatch import receiver